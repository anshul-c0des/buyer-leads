// Data model

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {   // User model to hold user'd details (for auth)
  id         String   @id @default(uuid())
  supabaseId String   @unique
  name       String   @db.VarChar(80)
  email      String   @unique @db.VarChar(255)
  phone      String   @db.VarChar(15)
  role       Role     @default(USER)
  createdAt  DateTime @default(now())
  buyers     Buyer[]  @relation("UserBuyers")
}

enum Role {   // RBAC
  USER
  ADMIN
}

model Buyer {   // Buyer/Leads Model 
  id           String       @id @default(uuid())
  fullName     String       @db.VarChar(80)
  email        String?      @db.VarChar(255)
  phone        String       @db.VarChar(15)
  city         City
  propertyType PropertyType
  bhk          BHK?
  purpose      Purpose
  budgetMin    Int?
  budgetMax    Int?
  timeline     Timeline
  source       Source
  status       Status       @default(New)
  notes        String?      @db.Text
  tags         String[]
  ownerId      String
  owner        User         @relation(fields: [ownerId], references: [id], name: "UserBuyers")   // ref to users model
  updatedAt    DateTime     @updatedAt

  history BuyerHistory[]

  @@index([phone])
  @@index([email])
}

model BuyerHistory {   // Buyer History model to hold recent changes
  id        String   @id @default(uuid())
  buyer     Buyer    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId   String
  changedBy String
  changedAt DateTime @default(now())
  diff      Json
}

enum City {
  Chandigarh
  Mohali
  Zirakpur
  Panchkula
  Other
}

enum PropertyType {
  Apartment
  Villa
  Plot
  Office
  Retail
}

enum BHK {
  Studio
  One
  Two
  Three
  Four
}

enum Purpose {
  Buy
  Rent
}

enum Timeline {
  ZeroToThreeMonths
  ThreeToSixMonths
  MoreThanSixMonths
  Exploring
}

enum Source {
  Website
  Referral
  WalkIn
  Call
  Other
}

enum Status {
  New
  Qualified
  Contacted
  Visited
  Negotiation
  Converted
  Dropped
}
